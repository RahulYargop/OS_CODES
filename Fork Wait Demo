import java.util.*;

public class ForkWaitDemo {
    public static void main(String[] args) throws InterruptedException {
        Scanner sc=new Scanner(System.in);
        // int[] arr = {3, 1, 5, 7, 3, 9};
        System.out.println("Enter the number of elements:");
        int n=sc.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the elements:");
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }

        // Create a child thread to simulate a child process
        Thread childThread = new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("Child process started.");
                // Child process sorts the array
                Arrays.sort(arr);
                System.out.println("Child process sorted array: " + Arrays.toString(arr));

                // Simulate child becoming a zombie by finishing execution
                try {
                    Thread.sleep(1000); // Delay to simulate zombie state
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("Child process finished.");
            }
        });

        // Start the child process
        childThread.start();

        // Simulate the parent process doing some work (e.g., sorting)
        System.out.println("Parent process started.");
        Arrays.sort(arr);
        System.out.println("Parent process sorted array: " + Arrays.toString(arr));

        // Wait for the child process to finish
        childThread.join();  // Simulates wait() in Unix

        System.out.println("Parent process finished.");
    }

    
}
